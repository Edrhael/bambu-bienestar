{"version":3,"file":"app.js","sources":["../../../resources/js/app.js"],"sourcesContent":["console.log('Hello Bambú!')\n\n// Referencia al botón\nconst themeToggleButton = document.querySelector('[ui-data-id=\"theme-toggle-btn\"]');\n\n// Detectar y aplicar el tema guardado\nconst savedTheme = localStorage.getItem('theme');\n\nif (savedTheme) {\n\n\tdocument.body.classList.add(savedTheme);\n} else {\n\n\t// Detectar preferencia del sistema si no hay tema guardado\n\tconst prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n\tdocument.body.classList.add(prefersDark ? 'dark-theme' : 'light-theme');\n}\n\n// Alternar tema y guardar preferencia\n\nthemeToggleButton.addEventListener('click', () => {\n\n\tif (document.body.classList.contains('dark-theme')) {\n\n\t\tdocument.body.classList.replace('dark-theme', 'light-theme');\n\t\tlocalStorage.setItem('theme', 'light-theme');\n\n\t} else {\n\n\t\tdocument.body.classList.replace('light-theme', 'dark-theme');\n\t\tlocalStorage.setItem('theme', 'dark-theme');\n\t}\n});\n\n// class EventDelegator {\n// \tconstructor(containerSelector) {\n// \t\tthis.container = document.querySelector(containerSelector);\n//\n// \t\tif (!this.container) {\n// \t\t\tthrow new Error(`Contenedor ${containerSelector} no encontrado.`);\n// \t\t}\n//\n// \t\tthis.eventHandlers = {};\n// \t\tthis.init();\n// \t}\n//\n// \tinit() {\n// \t\t// Escucha genérica para eventos más comunes\n// \t\tthis.container.addEventListener('click', (event) => this.handleEvent(event, 'click'));\n// \t\tthis.container.addEventListener('change', (event) => this.handleEvent(event, 'change'));\n// \t\tthis.container.addEventListener('input', (event) => this.handleEvent(event, 'input'));\n// \t}\n//\n// \thandleEvent(event, eventType) {\n// \t\tconst targetElement = event.target.closest('[ui-data]');\n// \t\tif (!targetElement) return;\n//\n// \t\tconst uiData = targetElement.getAttribute('ui-data');\n//\n// \t\tif (this.eventHandlers[eventType] && this.eventHandlers[eventType][uiData]) {\n// \t\t\tthis.eventHandlers[eventType][uiData](event, targetElement);\n// \t\t}\n// \t}\n//\n// \ton(eventMap) {\n// \t\tfor (const [eventType, handlers] of Object.entries(eventMap)) {\n// \t\t\tif (!this.eventHandlers[eventType]) {\n// \t\t\t\tthis.eventHandlers[eventType] = {};\n// \t\t\t}\n//\n// \t\t\tfor (const [uiDataValue, handler] of Object.entries(handlers)) {\n// \t\t\t\tthis.eventHandlers[eventType][uiDataValue] = handler;\n// \t\t\t}\n// \t\t}\n// \t}\n// }\n//\n// // Inicialización del delegador\n// const delegator = new EventDelegator('#app');\n//\n// // Registro eficiente de eventos\n// delegator.on({\n// \tclick: {\n// \t\t'button-save': (event, element) => {\n// \t\t\tconsole.log('Guardar clickeado!', element);\n// \t\t\talert('Guardando...');\n// \t\t},\n// \t\t'button-delete': (event, element) => {\n// \t\t\tconsole.log('Eliminar clickeado!', element);\n// \t\t\telement.closest('.item').remove();\n// \t\t}\n// \t},\n// \tinput: {\n// \t\t'search-box': (event, element) => {\n// \t\t\tconsole.log('Búsqueda:', element.value);\n// \t\t}\n// \t}\n// });"],"names":[],"mappings":"AAAA,QAAQ,IAAI,cAAc;AAG1B,MAAM,oBAAoB,SAAS,cAAc,iCAAiC;AAGlF,MAAM,aAAa,aAAa,QAAQ,OAAO;AAE/C,IAAI,YAAY;AAEf,WAAS,KAAK,UAAU,IAAI,UAAU;AACvC,OAAO;AAGN,QAAM,cAAc,OAAO,WAAW,8BAA8B,EAAE;AACtE,WAAS,KAAK,UAAU,IAAI,cAAc,eAAe,aAAa;AACvE;AAIA,kBAAkB,iBAAiB,SAAS,MAAM;AAEjD,MAAI,SAAS,KAAK,UAAU,SAAS,YAAY,GAAG;AAEnD,aAAS,KAAK,UAAU,QAAQ,cAAc,aAAa;AAC3D,iBAAa,QAAQ,SAAS,aAAa;AAAA,EAE7C,OAAQ;AAEN,aAAS,KAAK,UAAU,QAAQ,eAAe,YAAY;AAC3D,iBAAa,QAAQ,SAAS,YAAY;AAAA,EAC5C;AACA,CAAC;"}